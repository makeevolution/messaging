# A generic mongodb mongoexpress pair that actually works

# docker rm -f mongo
# docker rm -f mongo-express
# run using docker-compose up --force-recreate -d

version: '3.9'
services:
  mongo:
    image: bitnami/mongodb:8.0.3-debian-12-r0
    container_name: mongo
    ports:
      - "27017:27017"
    environment:
      # The username for the MongoDB root user (admin user).
      - MONGO_INITDB_ROOT_USERNAME=test
      # The password for the MongoDB root user (admin user).
      - MONGO_INITDB_ROOT_PASSWORD=test2
    networks:
      - ankoai_network

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    ports:
      - "8081:8081"
    environment:
      # The connection string to access the MongoDB database.
      # Format: mongodb://<host>:<port>/
      # It points to the "mongo" service created in this file.
      - ME_CONFIG_MONGODB_URL=mongodb://mongo:27017/
      # Disables basic authentication for accessing the Mongo Express UI.
      # Set to "true" to enable authentication.
      - ME_CONFIG_BASICAUTH=false
      # The username for MongoDB administrative access, required by Mongo Express.
      # Must match the MongoDB root username set in the "mongo" service.
      - ME_CONFIG_MONGODB_ADMINUSERNAME=test
      # The password for MongoDB administrative access, required by Mongo Express.
      # Must match the MongoDB root password set in the "mongo" service.
      - ME_CONFIG_MONGODB_ADMINPASSWORD=test2
    networks:
      - ankoai_network

  postgres:
    image: postgres:17-alpine
    ports:
      - 5432:5432
    environment:
      - POSTGRES_PASSWORD=pass
      - POSTGRES_DB=mydb
    networks:
      - ankoai_network
  
  # pgAdmin service (visualizer for orders service database)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: a@b.com  # Login email
      PGADMIN_DEFAULT_PASSWORD: pass  # Login password
    ports:
      - "5050:80"  # Expose the pgAdmin web interface
    networks:
      - ankoai_network
    volumes:
      - ./.containers/postgres/postgresconfig.json:/pgadmin4/servers.json  # Pre-configured servers
    depends_on:
      - postgres  # Ensure PostgreSQL starts before pgAdmin

  rabbitmq:
    image: rabbitmq:4-management
    container_name: 'rabbitmq'
    ports:
      - "15672:15672"
      - "5672:5672"
    networks:
      - ankoai_network

  jaeger:
    image: jaegertracing/opentelemetry-all-in-one:latest
    ports:
      - 16686:16686
      - 13133:13133
      - 4317:4317
      - 4318:4318
    networks:
      - ankoai_network
  
  anko.paymentsservice:
    image: aldosebastian/anko.paymentsservice
    container_name: "anko.paymentsservice"
    ports:
      - "5271:8080"
    environment:
      #  - ASPNETCORE_ENVIRONMENT=Production
      # OTEL_EXPORTER_OTLP_ENDPOINT=http://ankoai.seq:4317 (uncomment if want to export to Jaeger)
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://ankoai.seq:5341/ingest/otlp/v1/traces
      - OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf
    networks:
      - ankoai_network
    depends_on:
      - rabbitmq

  anko.ordersservice:
    image: aldosebastian/anko.ordersservice
    container_name: "anko.ordersservice"
    ports:
      - "5093:8080"
    # For learning purposes: In ASP.NET, if you run using dll, the default
    # ASPNETCORE_ENVIRONMNENT is Production! Commented out below just to reiterate
    # the point
    environment:
      #  - ASPNETCORE_ENVIRONMENT=Production
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://ankoai.seq:5341/ingest/otlp/v1/traces
      - OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf


    networks:
      - ankoai_network
    depends_on:
      - rabbitmq
  
  ankoai.seq:
    image: datalust/seq:latest
    container_name: ankoai.Seq
    volumes:
      - ./.containers/seq:/data
    environment:
      - ACCEPT_EULA=Y
    networks:
      - ankoai_network
    ports:
      - 5341:5341
      - 7272:80
    

networks:
  ankoai_network:
    driver: bridge